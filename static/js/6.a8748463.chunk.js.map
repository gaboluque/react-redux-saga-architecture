{"version":3,"sources":["redux/helpers/createAction.js","redux/helpers/notifyAction.js","services/api/dummyAPI/index.js","redux/modules/layout/actions/changeLanguage.js","routing/history.js","services/api/helpers/formatParams.js","services/api/dummyAPI/createPostService.js","redux/modules/posts/actions/createPost.js","redux/helpers/requestSuccess.js","redux/helpers/requestFailure.js","redux/helpers/request.js","redux/modules/posts/reducer.js","redux/modules/layout/reducer.js","redux/modules/posts/watcher.js","redux/sagas.js","redux/reducers.js","app/configureStore.js","app/ReduxContainer.jsx","routing/paths.js","services/api/dummyAPI/fetchPostsService.js","redux/modules/posts/actions/fetchPosts.js"],"names":["type","payload","notifyAction","data","callback","undefined","dummyAPI","axios","create","baseURL","defaults","paramsSerializer","params","qs","stringify","encode","interceptors","response","use","error","CHANGE_LANGUAGE_ACTION","changeLanguageNotifier","language","createAction","createBrowserHistory","queryKey","formatParams","method","testApi","post","then","parsedElement","fakeDataParser","createPostSuccess","createPostsAction","CREATE_POST_ACTION","formatter","formValues","userId","createPostsNotifier","loader","put","fetchPostsNotifier","notification","success","description","call","request","service","createPosts","redirect","POSTS_PATH","onSuccess","requestSuccess","push","requestFailure","status","onFailure","cancelableRequest","normalizer","includes","normalizedData","cancelId","rest","fork","myRequest","take","cancel","INITIAL_STATE","posts","state","FETCH_POSTS_SUCCESS","navigator","takeLatest","FETCH_POSTS_ACTION","fetchPostsAction","rootSaga","all","postsWatcher","history","persistConfig","key","process","storage","whitelist","pReducer","persistReducer","combineReducers","router","connectRouter","postsReducer","layout","layoutReducer","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","routerMiddleware","persistor","persistStore","run","sagas","configureStore","RouterContainer","lazy","loading","Loader","fallback","ROOT_PATH","NEW_POST_PATH","get","fetchPosts"],"mappings":"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","file":"static/js/6.a8748463.chunk.js","sourcesContent":["export default (type, payload = {}) => ({ type, payload });\n","/**\n * The notify action creates an overloaded redux action.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @data          (optional) An object containing the payload to the saga.\n * @callback      (optional) A function that will be called after the saga has finished with any data processed.\n */\nconst notifyAction = ({ type, data = {}, callback = undefined }) => ({\n  type,\n  callback,\n  data,\n});\n\nexport default notifyAction;\n","import axios from 'axios';\nimport qs from 'qs';\n\nconst dummyAPI = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n\ndummyAPI.defaults.paramsSerializer = (params) =>\n  qs.stringify(params, { encode: false });\n\ndummyAPI.interceptors.response.use(\n  (response) => response,\n  (error) => error.response\n);\n\nexport default dummyAPI;\n","import createAction from '../../../helpers/createAction';\n\n// CONSTANTS\nexport const CHANGE_LANGUAGE_ACTION = 'CHANGE_LANGUAGE_ACTION';\n\n/* CHANGE LANGUAGE NOTIFIER */\n\nconst changeLanguageNotifier = (language) => {\n  return createAction(CHANGE_LANGUAGE_ACTION, language);\n};\n\nexport { changeLanguageNotifier };\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  queryKey: false,\n});\n","const formatParams = (method, params) =>\n  method === 'get' ? { params } : params;\n\nexport default formatParams;\n","import testApi from './index';\nimport formatParams from '../helpers/formatParams';\n\nconst fakeDataParser = (data) => ({ ...data, parsedElement: 'Hi' });\n\nexport default (params) =>\n  testApi.post('/posts', formatParams(params)).then((data) => {\n    return fakeDataParser(data);\n  });\n","import { call, put } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport createPosts from '../../../../services/api/dummyAPI/createPostService';\nimport { POSTS_PATH } from '../../../../routing/paths';\nimport { fetchPostsNotifier } from './fetchPosts';\n\n// CONSTANTS\n\nexport const CREATE_POST_ACTION = 'CREATE_POST_ACTION';\nexport const CREATE_POST_SUCCESS = `${CREATE_POST_ACTION}_SUCCESS`;\nexport const CREATE_POST_FAILURE = `${CREATE_POST_ACTION}_FAILURE`;\n\n/* LOG IN NOTIFIER */\nconst formatter = (formValues) => {\n  return {\n    ...formValues,\n    userId: 10,\n  };\n};\n\nconst createPostsNotifier = (formValues) => {\n  return notifyAction({\n    type: CREATE_POST_ACTION,\n    loader: true,\n    data: formatter(formValues),\n  });\n};\n\n/* LOG IN ACTION */\n\nfunction* createPostSuccess() {\n  yield put(fetchPostsNotifier());\n  notification.success({ description: 'Post created correctly!' });\n}\n\nfunction* createPostsAction({ data }) {\n  yield call(request, {\n    type: CREATE_POST_ACTION,\n    service: createPosts,\n    params: data,\n    redirect: POSTS_PATH,\n    onSuccess: createPostSuccess,\n  });\n}\n\nexport { createPostsAction, createPostsNotifier };\n","import { push } from 'connected-react-router';\nimport { call, put } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestSuccess({\n  type,\n  data,\n  redirect,\n  callback,\n  onSuccess,\n}) {\n  if (redirect) yield put(push(redirect));\n  yield put(createAction(`${type}_SUCCESS`, data));\n  if (callback) yield call(callback, data);\n  if (onSuccess) yield call(onSuccess, data);\n}\n","import { put, call } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestFailure({ type, data, status, onFailure }) {\n  switch (status) {\n    case 403:\n      // TODO: Define what to do on 403\n      break;\n    case 401:\n      // TODO: Define what to do on 401\n      break;\n    case 408:\n      // TODO: Define what to do on 408\n      break;\n    default:\n      break;\n  }\n  yield put(createAction(`${type}_FAILURE`, data));\n  if (onFailure) yield call(onFailure);\n}\n","import { call, fork, take, cancel } from 'redux-saga/effects';\nimport requestSuccess from './requestSuccess';\nimport requestFailure from './requestFailure';\n\nfunction* request({\n  type,\n  service,\n  params = {},\n  redirect = null,\n  callback = null,\n  onSuccess = null,\n  onFailure = null,\n  normalizer = null,\n}) {\n  const response = yield call(service, params);\n\n  if (!response) {\n    // TODO: Handle server communication error\n  } else {\n    const { status, data } = response;\n    if ([200, 201].includes(status)) {\n      // If request call is successful\n      const normalizedData = normalizer ? normalizer(data) : data;\n      yield call(requestSuccess, {\n        type,\n        data: normalizedData,\n        redirect,\n        callback,\n        onSuccess,\n      });\n    } else {\n      // If request call fails\n      yield call(requestFailure, { type, data, status, onFailure });\n    }\n  }\n  // TODO: Handle any loader ends\n}\n\n/**\n * The request function can be used with redux saga to make async API calls.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @method        A strig with the type of method used to call the API (GET, POST, PUT, DELETE)\n * @endpoint      Tha actual enpoint called with the API\n * @api           An Axios instace containing the specific API information\n * @params        (optional) An object containing the data that will be sent to the endpoint\n * @path          (optional) A react-router to redirect after the request is succesfull\n * @callback      (optional) A callback function to be called after the request is succesfull with the data processed\n * @onSuccess     (optional) A custom generator function passed to redux saga if the request is successful\n * @onFailure     (optional) A custom generator function passed to redux saga if the request fails\n * @normalizer    (optional) A custom reducer to process API response data before reaching the reducer\n * @cancelId      (optional) A unique id that can be used with cancelable requests. If a cancelId is passed, the request will be canceled next time an identical id is recieved.\n */\nfunction* cancelableRequest({ cancelId, ...rest }) {\n  const myRequest = yield fork(request, rest);\n  if (cancelId) {\n    yield take(`${rest.type}_${cancelId}`);\n    yield cancel(myRequest);\n  }\n}\n\nexport default cancelableRequest;\n","import { FETCH_POSTS_SUCCESS } from './actions/fetchPosts';\n\n// TODO: Store design\nexport const INITIAL_STATE = {\n  posts: [],\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case FETCH_POSTS_SUCCESS:\n      return { ...state, posts: payload };\n    default:\n      return state;\n  }\n};\n","import { CHANGE_LANGUAGE_ACTION } from './actions/changeLanguage';\n\nexport const INITIAL_STATE = {\n  language: navigator.language || 'en',\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case CHANGE_LANGUAGE_ACTION:\n      return { ...state, language: payload };\n    default:\n      return state;\n  }\n};\n","import { takeLatest } from 'redux-saga/effects';\nimport { fetchPostsAction, FETCH_POSTS_ACTION } from './actions/fetchPosts';\nimport { CREATE_POST_ACTION, createPostsAction } from './actions/createPost';\n\nexport default [\n  takeLatest(FETCH_POSTS_ACTION, fetchPostsAction),\n  takeLatest(CREATE_POST_ACTION, createPostsAction),\n];\n","import { all } from 'redux-saga/effects';\nimport postsWatcher from './modules/posts/watcher';\n\nexport default function* rootSaga() {\n  yield all([...postsWatcher]);\n}\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport postsReducer from './modules/posts/reducer';\nimport layoutReducer from './modules/layout/reducer';\n\nexport default (history) =>\n  combineReducers({\n    router: connectRouter(history),\n    posts: postsReducer,\n    layout: layoutReducer,\n  });\n","import { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from '../redux/reducers';\nimport sagas from '../redux/sagas';\n\nimport history from '../routing/history';\n\nconst persistConfig = {\n  key: `${process.env.REACT_APP_NAME}_persist_store`,\n  storage,\n  whitelist: ['layout'],\n};\nconst pReducer = persistReducer(persistConfig, reducers(history));\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const composeEnhancers =\n    (process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\n  const store = createStore(\n    pReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\n  );\n\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(sagas);\n  return { persistor, store };\n};\n","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Loader from '../components/layout/Loader';\nimport configureStore from './configureStore';\n\nconst { store, persistor } = configureStore();\nconst RouterContainer = lazy(() => import('./RouterContainer'));\n\n/**\n * This is the main redux component, here we can add any providers and\n * necessary wrappers.\n *\n * Right now we've added the actual redux provider and a\n * PersistGate to persist our store on page reload\n *\n */\nexport default () => (\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <Suspense fallback={<Loader />}>\n        <RouterContainer />\n      </Suspense>\n    </PersistGate>\n  </Provider>\n);\n","const ROOT_PATH = '/';\n\nconst POSTS_PATH = '/posts';\nconst NEW_POST_PATH = `${POSTS_PATH}/new`;\n\nexport { ROOT_PATH, POSTS_PATH, NEW_POST_PATH };\n","import testApi from './index';\n\nexport const FETCH_POSTS_ENDPOINT = '/posts?userId=10';\n\nexport default () => {\n  return testApi.get(FETCH_POSTS_ENDPOINT).then((data) => {\n    return data;\n  });\n};\n","import { call } from 'redux-saga/effects';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport fetchPosts from '../../../../services/api/dummyAPI/fetchPostsService';\n\n// CONSTANTS\n\nexport const FETCH_POSTS_ACTION = 'FETCH_POSTS_ACTION';\nexport const FETCH_POSTS_SUCCESS = `${FETCH_POSTS_ACTION}_SUCCESS`;\nexport const FETCH_POSTS_FAILURE = `${FETCH_POSTS_ACTION}_FAILURE`;\n\nconst fetchPostsNotifier = () => {\n  return notifyAction({\n    type: FETCH_POSTS_ACTION,\n    loader: true,\n  });\n};\n\n/* LOG IN ACTION */\nfunction* fetchPostsAction() {\n  yield call(request, {\n    type: FETCH_POSTS_ACTION,\n    service: fetchPosts,\n    cancelId: 'fetch_posts',\n  });\n}\n\nexport { fetchPostsAction, fetchPostsNotifier };\n"],"sourceRoot":""}