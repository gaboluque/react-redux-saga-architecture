{"version":3,"sources":["services/api/dummyAPI/posts/fetchPostsService.js","redux/modules/posts/actions/fetchPosts.js","redux/modules/auth/actions/logIn.js","redux/modules/users/actions/showUser.js","services/api/dummyAPI/users/fetchUsersService.js","redux/modules/users/actions/fetchUsers.js","services/api/dummyAPI/users/fetchUserDetailsService.js","redux/modules/users/actions/fetchUserDetails.js","redux/helpers/requestSuccess.js","redux/helpers/requestFailure.js","redux/modules/layout/actions/changeLanguage.js","utils/auth/roles.js","routing/history.js","services/api/helpers/formatParams.js","services/api/dummyAPI/posts/createPostService.js","redux/modules/posts/actions/createPost.js","redux/modules/posts/reducer.js","redux/modules/layout/reducer.js","redux/modules/layout/actions/loaderActions.js","redux/modules/auth/reducer.js","redux/modules/users/reducer.js","redux/modules/posts/watcher.js","redux/modules/auth/watcher.js","redux/modules/layout/watcher.js","redux/modules/users/watcher.js","redux/sagas.js","redux/reducers.js","redux/configureStore.js","app/ReduxContainer.jsx","routing/paths.js","redux/helpers/notifyAction.js","redux/helpers/request.js","redux/helpers/createAction.js","services/api/dummyAPI/index.js"],"names":["testApi","get","then","data","fetchPostsAction","FETCH_POSTS_ACTION","FETCH_POSTS_SUCCESS","fetchPostsNotifier","notifyAction","type","loader","call","request","service","fetchPosts","cancelId","logInAction","LOG_IN_ACTION","LOG_IN_SUCCESS","LOG_IN_FAILURE","logInNotifier","formValues","delay","username","password","requestSuccess","user","role","USER_ROLE","token","error","description","requestFailure","showUserAction","SHOW_USER_ACTION","showUserNotifier","userData","payload","id","put","push","USER_DETAIL_PATH","fetchUsersAction","FETCH_USERS_ACTION","FETCH_USERS_SUCCESS","fetchUsersNotifier","fetchUsers","fetchUserDetailsAction","FETCH_USER_DETAILS_ACTION","FETCH_USER_DETAILS_SUCCESS","fetchUserDetailsNotifier","fetchUserDetailsService","redirect","callback","onSuccess","createAction","status","onFailure","CHANGE_LANGUAGE_ACTION","changeLanguageNotifier","language","createBrowserHistory","queryKey","formatParams","method","params","post","parsedElement","fakeDataParser","createPostSuccess","createPostsAction","CREATE_POST_ACTION","formatter","userId","createPostsNotifier","notification","success","message","createPosts","POSTS_PATH","INITIAL_STATE","posts","state","navigator","loading","verified","userList","userDetail","takeLatest","loaderListener","actionName","take","action","includes","notifier","rootSaga","all","postsWatcher","authWatcher","layoutWatcher","usersWatcher","history","persistConfig","key","process","storage","whitelist","pReducer","persistReducer","combineReducers","auth","authReducer","layout","layoutReducer","postsReducer","router","connectRouter","users","usersReducer","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","routerMiddleware","persistor","persistStore","run","sagas","configureStore","RouterContainer","lazy","Loader","fallback","HOME_PATH","NEW_POST_PATH","USERS_PATH","undefined","rest","cancelableRequest","normalizer","response","normalizedData","fork","myRequest","cancel","dummyAPI","axios","create","baseURL","defaults","paramsSerializer","qs","stringify","encode","interceptors","use"],"mappings":"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","file":"static/js/5.580de40e.chunk.js","sourcesContent":["import testApi from '../index';\n\nexport const FETCH_POSTS_ENDPOINT = '/posts?userId=10';\n\nexport default () => {\n  return testApi.get(FETCH_POSTS_ENDPOINT).then((data) => {\n    return data;\n  });\n};\n","import { call } from 'redux-saga/effects';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport fetchPosts from '../../../../services/api/dummyAPI/posts/fetchPostsService';\n\nexport const FETCH_POSTS_ACTION = 'FETCH_POSTS_ACTION';\nexport const FETCH_POSTS_SUCCESS = `${FETCH_POSTS_ACTION}_SUCCESS`;\nexport const FETCH_POSTS_FAILURE = `${FETCH_POSTS_ACTION}_FAILURE`;\n\nconst fetchPostsNotifier = () => {\n  return notifyAction({\n    type: FETCH_POSTS_ACTION,\n    loader: true,\n  });\n};\n\nfunction* fetchPostsAction() {\n  yield call(request, {\n    type: FETCH_POSTS_ACTION,\n    service: fetchPosts,\n    cancelId: 'fetch_posts',\n  });\n}\n\nexport { fetchPostsAction, fetchPostsNotifier };\n","import { call, delay } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport notifyAction from '../../../helpers/notifyAction';\nimport requestSuccess from '../../../helpers/requestSuccess';\nimport { USER_ROLE } from '../../../../utils/auth/roles';\nimport requestFailure from '../../../helpers/requestFailure';\n\n// CONSTANTS\nexport const LOG_IN_ACTION = 'LOG_IN_ACTION';\nexport const LOG_IN_SUCCESS = `${LOG_IN_ACTION}_SUCCESS`;\nexport const LOG_IN_FAILURE = `${LOG_IN_ACTION}FAILURE`;\n\n/* LOG IN NOTIFIER */\n\nconst logInNotifier = (formValues) => {\n  return notifyAction({\n    type: LOG_IN_ACTION,\n    data: formValues,\n    loader: true,\n  });\n};\n\n/* LOG IN ACTION */\n// Mock login\nfunction* logInAction({ data }) {\n  yield delay(3000); // Simulate server delay\n\n  if (data.username === 'test' && data.password === 'test') {\n    yield call(requestSuccess, {\n      type: LOG_IN_ACTION,\n      data: { user: data, role: USER_ROLE, token: 'testToken' },\n    });\n  } else {\n    notification.error({ description: 'Invalid username or password' });\n    yield call(requestFailure, {\n      type: LOG_IN_ACTION,\n      data,\n    });\n  }\n}\n\nexport { logInNotifier, logInAction };\n","import { put } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport notifyAction from '../../../helpers/notifyAction';\nimport { USER_DETAIL_PATH } from '../../../../routing/paths';\n\nexport const SHOW_USER_ACTION = 'SHOW_USER_ACTION';\n\n// We add the data we already have to the reducer, which will be completed\n// afterwards by an API call\nconst showUserNotifier = (userData) => {\n  return notifyAction({\n    type: SHOW_USER_ACTION,\n    payload: userData,\n  });\n};\n\n// Then we change our location to the detail page\nfunction* showUserAction({ payload: { id } }) {\n  yield put(push(USER_DETAIL_PATH(id)));\n}\n\nexport { showUserNotifier, showUserAction };\n","import testApi from '../index';\n\nexport const FETCH_POSTS_ENDPOINT = '/users';\n\nexport default () => {\n  return testApi.get(FETCH_POSTS_ENDPOINT).then((data) => {\n    return data;\n  });\n};\n","import { call } from 'redux-saga/effects';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport fetchUsers from '../../../../services/api/dummyAPI/users/fetchUsersService';\n\nexport const FETCH_USERS_ACTION = 'FETCH_USERS_ACTION';\nexport const FETCH_USERS_SUCCESS = `${FETCH_USERS_ACTION}_SUCCESS`;\nexport const FETCH_USERS_FAILURE = `${FETCH_USERS_ACTION}_FAILURE`;\n\nconst fetchUsersNotifier = () => {\n  return notifyAction({\n    type: FETCH_USERS_ACTION,\n    loader: true,\n  });\n};\n\nfunction* fetchUsersAction() {\n  yield call(request, {\n    type: FETCH_USERS_ACTION,\n    service: fetchUsers,\n    cancelId: 'fetch_users',\n  });\n}\n\nexport { fetchUsersAction, fetchUsersNotifier };\n","import testApi from '../index';\n\nexport const FETCH_POSTS_ENDPOINT = '/users';\n\nexport default (id) => () => {\n  return testApi.get(`${FETCH_POSTS_ENDPOINT}/${id}`).then((data) => {\n    return data;\n  });\n};\n","import { call } from 'redux-saga/effects';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport fetchUserDetailsService from '../../../../services/api/dummyAPI/users/fetchUserDetailsService';\n\nexport const FETCH_USER_DETAILS_ACTION = 'FETCH_USER_DETAILS_ACTION';\nexport const FETCH_USER_DETAILS_SUCCESS = `${FETCH_USER_DETAILS_ACTION}_SUCCESS`;\nexport const FETCH_USER_DETAILS_FAILURE = `${FETCH_USER_DETAILS_ACTION}_FAILURE`;\n\nconst fetchUserDetailsNotifier = (id) => {\n  return notifyAction({\n    type: FETCH_USER_DETAILS_ACTION,\n    data: id,\n  });\n};\n\nfunction* fetchUserDetailsAction({ data }) {\n  yield call(request, {\n    type: FETCH_USER_DETAILS_ACTION,\n    service: fetchUserDetailsService(data),\n    cancelId: `fetch_user_detail_${data}`,\n  });\n}\n\nexport { fetchUserDetailsAction, fetchUserDetailsNotifier };\n","import { push } from 'connected-react-router';\nimport { call, put } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestSuccess({\n  type,\n  data,\n  redirect,\n  callback,\n  onSuccess,\n}) {\n  if (redirect) yield put(push(redirect));\n  yield put(createAction(`${type}_SUCCESS`, data));\n  if (callback) yield call(callback, data);\n  if (onSuccess) yield call(onSuccess, data);\n}\n","import { put, call } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestFailure({ type, data, status, onFailure }) {\n  switch (status) {\n    case 403:\n      // TODO: Define what to do on 403\n      break;\n    case 401:\n      // TODO: Define what to do on 401\n      break;\n    case 408:\n      // TODO: Define what to do on 408\n      break;\n    default:\n      break;\n  }\n  yield put(createAction(`${type}_FAILURE`, data));\n  if (onFailure) yield call(onFailure);\n}\n","import createAction from '../../../helpers/createAction';\n\n// CONSTANTS\nexport const CHANGE_LANGUAGE_ACTION = 'CHANGE_LANGUAGE_ACTION';\n\n/* CHANGE LANGUAGE NOTIFIER */\n\nconst changeLanguageNotifier = (language) =>\n  createAction(CHANGE_LANGUAGE_ACTION, language);\n\nexport { changeLanguageNotifier };\n","const USER_ROLE = 'user';\n\nexport { USER_ROLE };\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  queryKey: false,\n});\n","const formatParams = (method, params) =>\n  method === 'get' ? { params } : params;\n\nexport default formatParams;\n","import testApi from '../index';\nimport formatParams from '../../helpers/formatParams';\n\nconst fakeDataParser = (data) => ({ ...data, parsedElement: 'Hi' });\n\nexport default (params) =>\n  testApi.post('/posts', formatParams(params)).then((data) => {\n    return fakeDataParser(data);\n  });\n","import { call, put } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport createPosts from '../../../../services/api/dummyAPI/posts/createPostService';\nimport { POSTS_PATH } from '../../../../routing/paths';\nimport { fetchPostsNotifier } from './fetchPosts';\n\nexport const CREATE_POST_ACTION = 'CREATE_POST_ACTION';\nexport const CREATE_POST_SUCCESS = `${CREATE_POST_ACTION}_SUCCESS`;\nexport const CREATE_POST_FAILURE = `${CREATE_POST_ACTION}_FAILURE`;\n\nconst formatter = (formValues) => {\n  return {\n    ...formValues,\n    userId: 10,\n  };\n};\n\nconst createPostsNotifier = (formValues) => {\n  return notifyAction({\n    type: CREATE_POST_ACTION,\n    loader: true,\n    data: formatter(formValues),\n  });\n};\n\nfunction* createPostSuccess() {\n  yield put(fetchPostsNotifier());\n  notification.success({ message: 'Post created correctly!' });\n}\n\nfunction* createPostsAction({ data }) {\n  yield call(request, {\n    type: CREATE_POST_ACTION,\n    service: createPosts,\n    params: data,\n    redirect: POSTS_PATH,\n    onSuccess: createPostSuccess,\n  });\n}\n\nexport { createPostsAction, createPostsNotifier };\n","import { FETCH_POSTS_SUCCESS } from './actions/fetchPosts';\n\n// TODO: Store design\nexport const INITIAL_STATE = {\n  posts: [],\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case FETCH_POSTS_SUCCESS:\n      return { ...state, posts: payload };\n    default:\n      return state;\n  }\n};\n","import { CHANGE_LANGUAGE_ACTION } from './actions/changeLanguage';\nimport {\n  HIDE_LOADER_ACTION,\n  SHOW_LOADER_ACTION,\n} from './actions/loaderActions';\n\nexport const INITIAL_STATE = {\n  language: navigator.language || 'en',\n  loading: false,\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case CHANGE_LANGUAGE_ACTION:\n      return { ...state, language: payload };\n    case SHOW_LOADER_ACTION:\n      return { ...state, loading: true };\n    case HIDE_LOADER_ACTION:\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n","import createAction from '../../../helpers/createAction';\n\n// CONSTANTS\nexport const SHOW_LOADER_ACTION = 'SHOW_LOADER_ACTION';\nexport const HIDE_LOADER_ACTION = 'HIDE_LOADER_ACTION';\n\n/* CHANGE LANGUAGE NOTIFIER */\n\nconst showLoaderAction = () => createAction(SHOW_LOADER_ACTION);\nconst hideLoaderAction = () => createAction(HIDE_LOADER_ACTION);\n\nexport { showLoaderAction, hideLoaderAction };\n","import { LOG_IN_FAILURE, LOG_IN_SUCCESS } from './actions/logIn';\n\nexport const INITIAL_STATE = {\n  token: null,\n  role: 'public',\n  verified: false,\n  user: {},\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case LOG_IN_SUCCESS:\n      return { ...state, ...{ ...payload, verified: true } };\n    case LOG_IN_FAILURE:\n      return { ...INITIAL_STATE, verified: true };\n    default:\n      return state;\n  }\n};\n","import { FETCH_USERS_SUCCESS } from './actions/fetchUsers';\nimport { SHOW_USER_ACTION } from './actions/showUser';\nimport { FETCH_USER_DETAILS_SUCCESS } from './actions/fetchUserDetails';\n\n// TODO: Store design\nexport const INITIAL_STATE = {\n  userList: [],\n  userDetail: {},\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case FETCH_USERS_SUCCESS:\n      return { ...state, userList: payload };\n    case FETCH_USER_DETAILS_SUCCESS:\n      return { ...state, userDetail: payload };\n    case SHOW_USER_ACTION:\n      return { ...state, userDetail: payload };\n    default:\n      return state;\n  }\n};\n","import { takeLatest } from 'redux-saga/effects';\nimport { fetchPostsAction, FETCH_POSTS_ACTION } from './actions/fetchPosts';\nimport { CREATE_POST_ACTION, createPostsAction } from './actions/createPost';\n\nexport default [\n  takeLatest(FETCH_POSTS_ACTION, fetchPostsAction),\n  takeLatest(CREATE_POST_ACTION, createPostsAction),\n];\n","import { takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_ACTION, logInAction } from './actions/logIn';\n\nexport default [takeLatest(LOG_IN_ACTION, logInAction)];\n","import { put, take, takeLatest } from 'redux-saga/effects';\nimport { hideLoaderAction, showLoaderAction } from './actions/loaderActions';\n\nconst isLoaderNotifier = ({ notifier, loader }) => notifier && loader;\n\nfunction* loaderListener({ type: actionName }) {\n  yield put(showLoaderAction());\n\n  // Wait until an action is dispatched with the same type\n  yield take(({ type, action }) => action && type.includes(actionName));\n  yield put(hideLoaderAction());\n}\n\nexport default [takeLatest(isLoaderNotifier, loaderListener)];\n","import { takeLatest } from 'redux-saga/effects';\nimport { fetchUsersAction, FETCH_USERS_ACTION } from './actions/fetchUsers';\nimport { SHOW_USER_ACTION, showUserAction } from './actions/showUser';\nimport {\n  FETCH_USER_DETAILS_ACTION,\n  fetchUserDetailsAction,\n} from './actions/fetchUserDetails';\n\nexport default [\n  takeLatest(FETCH_USERS_ACTION, fetchUsersAction),\n  takeLatest(SHOW_USER_ACTION, showUserAction),\n  takeLatest(FETCH_USER_DETAILS_ACTION, fetchUserDetailsAction),\n];\n","import { all } from 'redux-saga/effects';\nimport postsWatcher from './modules/posts/watcher';\nimport authWatcher from './modules/auth/watcher';\nimport layoutWatcher from './modules/layout/watcher';\nimport usersWatcher from './modules/users/watcher';\n\nexport default function* rootSaga() {\n  yield all([\n    ...postsWatcher,\n    ...authWatcher,\n    ...layoutWatcher,\n    ...usersWatcher,\n  ]);\n}\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport postsReducer from './modules/posts/reducer';\nimport layoutReducer from './modules/layout/reducer';\nimport authReducer from './modules/auth/reducer';\nimport usersReducer from './modules/users/reducer';\n\nexport default (history) =>\n  combineReducers({\n    auth: authReducer,\n    layout: layoutReducer,\n    posts: postsReducer,\n    router: connectRouter(history),\n    users: usersReducer,\n  });\n","import { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nimport history from '../routing/history';\n\nconst persistConfig = {\n  key: `${process.env.REACT_APP_NAME}_persist_store`,\n  storage,\n  whitelist: ['layout'],\n};\nconst pReducer = persistReducer(persistConfig, reducers(history));\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const composeEnhancers =\n    (process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\n  const store = createStore(\n    pReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\n  );\n\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(sagas);\n  return { persistor, store };\n};\n","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Loader from '../components/layout/Loader';\nimport configureStore from '../redux/configureStore';\n\nconst { store, persistor } = configureStore();\nconst RouterContainer = lazy(() => import('./RouterContainer'));\n\n/**\n * This is the main redux component, here we can add any providers and\n * necessary wrappers.\n *\n * Right now we've added the actual redux provider and a\n * PersistGate to persist our store on page reload\n *\n */\nexport default () => (\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <Suspense fallback={<Loader />}>\n        <RouterContainer />\n      </Suspense>\n    </PersistGate>\n  </Provider>\n);\n","const HOME_PATH = '/';\n\nconst POSTS_PATH = '/posts';\nconst NEW_POST_PATH = `${POSTS_PATH}/new`;\n\nconst USERS_PATH = '/users';\nconst USER_DETAIL_PATH = (id) => `${USERS_PATH}/${id}`;\n\nexport { HOME_PATH, POSTS_PATH, NEW_POST_PATH, USERS_PATH, USER_DETAIL_PATH };\n","/**\n * The notify action creates an overloaded redux action.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @data          (optional) An object containing the payload to the saga.\n * @loader        (optional) A boolean to notify that we want to show a loader in the screen.\n * @callback      (optional) A function that will be called after the saga has finished with any data processed.\n */\nconst notifyAction = ({\n  type,\n  data = {},\n  loader = false,\n  callback = undefined,\n  ...rest\n}) => ({\n  type,\n  callback,\n  data,\n  loader,\n  notifier: true,\n  ...rest,\n});\n\nexport default notifyAction;\n","import { call, fork, take, cancel } from 'redux-saga/effects';\nimport requestSuccess from './requestSuccess';\nimport requestFailure from './requestFailure';\n\nfunction* request({\n  type,\n  service,\n  params = {},\n  redirect = null,\n  callback = null,\n  onSuccess = null,\n  onFailure = null,\n  normalizer = null,\n}) {\n  const response = yield call(service, params);\n\n  if (!response) {\n    // TODO: Handle server communication error\n  } else {\n    const { status, data } = response;\n    if ([200, 201].includes(status)) {\n      // If request call is successful\n      const normalizedData = normalizer ? normalizer(data) : data;\n      yield call(requestSuccess, {\n        type,\n        data: normalizedData,\n        redirect,\n        callback,\n        onSuccess,\n      });\n    } else {\n      // If request call fails\n      yield call(requestFailure, { type, data, status, onFailure });\n    }\n  }\n  // TODO: Handle any loader ends\n}\n\n/**\n * The request function can be used with redux saga to make async API calls.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @method        A strig with the type of method used to call the API (GET, POST, PUT, DELETE)\n * @endpoint      Tha actual enpoint called with the API\n * @api           An Axios instace containing the specific API information\n * @params        (optional) An object containing the data that will be sent to the endpoint\n * @path          (optional) A react-router to redirect after the request is succesfull\n * @callback      (optional) A callback function to be called after the request is succesfull with the data processed\n * @onSuccess     (optional) A custom generator function passed to redux saga if the request is successful\n * @onFailure     (optional) A custom generator function passed to redux saga if the request fails\n * @normalizer    (optional) A custom reducer to process API response data before reaching the reducer\n * @cancelId      (optional) A unique id that can be used with cancelable requests. If a cancelId is passed, the request will be canceled next time an identical id is recieved.\n */\nfunction* cancelableRequest({ cancelId, ...rest }) {\n  const myRequest = yield fork(request, rest);\n  if (cancelId) {\n    yield take(`${rest.type}_${cancelId}`);\n    yield cancel(myRequest);\n  }\n}\n\nexport default cancelableRequest;\n","export default (type, payload = {}) => ({ type, payload, action: true });\n","import axios from 'axios';\nimport qs from 'qs';\n\nconst dummyAPI = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n\ndummyAPI.defaults.paramsSerializer = (params) =>\n  qs.stringify(params, { encode: false });\n\ndummyAPI.interceptors.response.use(\n  (response) => response,\n  (error) => error.response\n);\n\nexport default dummyAPI;\n"],"sourceRoot":""}