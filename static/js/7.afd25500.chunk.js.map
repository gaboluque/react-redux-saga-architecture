{"version":3,"sources":["pages/Root/index.jsx","pages/Posts/PostsList/components/PostListItem/index.jsx","utils/types/postsTypes.js","pages/Posts/PostsList/index.jsx","routing/routes.js","app/RoutesContainer.jsx","components/layout/Breadcrumb/index.jsx","components/layout/Sidebar/index.jsx","components/layout/AppLayout/index.jsx","app/AppContainer.jsx"],"names":["Root","className","t","PostListItem","shape","id","number","title","string","body","post","defaultProps","PostsList","fetchPosts","posts","newPost","useEffect","length","extra","onClick","loading","map","Item","key","mapDispatchToProps","fetchPostsNotifier","push","NEW_POST_PATH","connect","state","Form","lazy","routes","path","paths","Component","exact","roles","RoutesContainer","fallback","active","component","to","ROOT_PATH","reconstructPath","index","split","filter","_path","i","join","Breadcrumb","pathname","goTo","locationItems","handleClick","item","Sider","menu","includes","Sidebar","width","mode","selectedKeys","route","Header","Content","Footer","lngButton","lng","action","type","toUpperCase","setLanguage","changeLanguageNotifier","location","router","layout","language","children","i18n","changeLanguage","md","process","AppContainer","locale","esES"],"mappings":"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","file":"static/js/7.afd25500.chunk.js","sourcesContent":["import React from 'react';\nimport { t } from '../../i18n';\n\nconst Root = () => {\n  return <div className=\"home\">{t('Hello team')}</div>;\n};\n\nRoot.propTypes = {};\n\nexport default Root;\n","import React from 'react';\nimport { Card } from 'antd';\nimport { postType } from '../../../../../utils/types/postsTypes';\n\nconst PostListItem = ({ post }) => {\n  return <Card title={post.title}>{post.body}</Card>;\n};\n\nPostListItem.propTypes = {\n  post: postType.isRequired,\n};\n\nPostListItem.defaultProps = {};\n\nexport default PostListItem;\n","import { number, shape, string } from 'prop-types';\n\nexport const postType = shape({\n  id: number,\n  title: string,\n  body: string,\n});\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { arrayOf, func } from 'prop-types';\nimport { Button, Card, List } from 'antd';\nimport { push } from 'react-router-redux';\nimport { fetchPostsNotifier } from '../../../redux/modules/posts/actions/fetchPosts';\nimport { postType } from '../../../utils/types/postsTypes';\nimport { NEW_POST_PATH } from '../../../routing/paths';\nimport PostListItem from './components/PostListItem';\n\nconst PostsList = ({ fetchPosts, posts, newPost }) => {\n  useEffect(() => {\n    if (!posts.length) fetchPosts();\n  }, []);\n\n  return (\n    <Card\n      className=\"posts-list\"\n      title=\"Posts list\"\n      extra={<Button onClick={newPost}>Add Post</Button>}\n    >\n      <List loading={!posts.length}>\n        {posts.map((post) => {\n          return (\n            <List.Item key={post.id}>\n              <PostListItem post={post} />\n            </List.Item>\n          );\n        })}\n      </List>\n    </Card>\n  );\n};\n\nPostsList.propTypes = {\n  fetchPosts: func.isRequired,\n  newPost: func.isRequired,\n  posts: arrayOf(postType).isRequired,\n};\n\nPostsList.defaultProps = {};\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.posts.posts,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchPosts: fetchPostsNotifier,\n  newPost: () => push(NEW_POST_PATH),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\n","import { lazy } from 'react';\nimport Root from '../pages/Root';\nimport * as paths from './paths';\nimport PostsList from '../pages/Posts/PostsList';\n\nconst Form = lazy(() => import('../pages/Posts/NewPost'));\n\nconst routes = [\n  {\n    title: 'Home',\n    path: paths.ROOT_PATH,\n    Component: Root,\n    exact: true,\n    roles: [],\n  },\n  {\n    title: 'Posts',\n    path: paths.POSTS_PATH,\n    Component: PostsList,\n    exact: true,\n    roles: [],\n  },\n  {\n    title: 'New',\n    path: paths.NEW_POST_PATH,\n    Component: Form,\n    exact: true,\n    roles: [],\n  },\n];\n\nexport default routes;\n","import { Skeleton } from 'antd';\nimport React, { Suspense } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { ROOT_PATH } from '../routing/paths';\nimport routes from '../routing/routes';\n\n/**\n * This is the main routes container. We add it inside the app's layout so that\n * it won't update each time we change routes.\n *\n */\nconst RoutesContainer = () => {\n  return (\n    <Suspense fallback={<Skeleton active />}>\n      <Switch>\n        {routes.map(({ path, Component, exact }) => (\n          <Route key={path} path={path} component={Component} exact={exact} />\n        ))}\n        <Redirect to={ROOT_PATH} />\n      </Switch>\n    </Suspense>\n  );\n};\n\nRoutesContainer.propTypes = {};\n\nRoutesContainer.defaultProps = {};\n\nexport default RoutesContainer;\n","import React from 'react';\nimport { Breadcrumb as AntBreadcrumb } from 'antd';\nimport { func, string } from 'prop-types';\nimport { startCase } from 'lodash';\nimport { ROOT_PATH } from '../../../routing/paths';\n\nconst reconstructPath = (path, index) => {\n  const newPath = path.split('/');\n  const pathArr = newPath.filter((_path, i) => i <= index);\n  return pathArr.join('/');\n};\n\n/**\n * Breadcrumb component\n * This component handles the breadcrumb given a pathname and a function to\n * go to a specific location\n *\n * @pathname - (redux) the actual pathname from the router\n * @goTo     - (redux) function mapped to react-router-redux \"push\"\n *\n */\nconst Breadcrumb = ({ pathname, goTo }) => {\n  const locationItems = pathname ? pathname.split('/') : [];\n\n  const handleClick = (path) => () => {\n    goTo(path);\n  };\n\n  return (\n    <AntBreadcrumb>\n      <AntBreadcrumb.Item onClick={handleClick(ROOT_PATH)}>\n        Home\n      </AntBreadcrumb.Item>\n      {locationItems.map((item, index) => (\n        <AntBreadcrumb.Item\n          key={item}\n          onClick={handleClick(reconstructPath(pathname, index))}\n        >\n          {startCase(item)}\n        </AntBreadcrumb.Item>\n      ))}\n    </AntBreadcrumb>\n  );\n};\n\nBreadcrumb.propTypes = {\n  pathname: string.isRequired,\n  goTo: func.isRequired,\n};\n\nexport default Breadcrumb;\n","import React from 'react';\nimport { Menu, Layout } from 'antd';\nimport { func, string } from 'prop-types';\nimport './sidebar.scss';\nimport routes from '../../../routing/routes';\n\nconst { Sider } = Layout;\n\nconst menu = routes.filter(({ title }) => ['Posts'].includes(title));\n\n/**\n * Sidebar component\n * This component handles the sidebar menu\n *\n * @pathname - (redux) the actual pathname from the router\n * @goTo     - (redux) function mapped to react-router-redux \"push\"\n *\n */\nconst Sidebar = ({ pathname, goTo }) => {\n  const handleClick = (path) => () => goTo(path);\n\n  return (\n    <Sider width={200} className=\"sidebar\">\n      <Menu mode=\"inline\" selectedKeys={pathname} className=\"sidebar-menu\">\n        {menu.map((route) => (\n          <Menu.Item key={route.path} onClick={handleClick(route.path)}>\n            {route.title}\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  );\n};\n\nSidebar.propTypes = {\n  pathname: string.isRequired,\n  goTo: func.isRequired,\n};\n\nexport default Sidebar;\n","import React, { useEffect } from 'react';\nimport { Button, Col, Layout, Row } from 'antd';\nimport { func, node, string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport i18n from 'i18next';\nimport Breadcrumb from '../Breadcrumb';\nimport Sidebar from '../Sidebar';\nimport './appLayout.scss';\nimport { changeLanguageNotifier } from '../../../redux/modules/layout/actions/changeLanguage';\n\nconst { Header, Content, Footer } = Layout;\n\nconst lngButton = (lng, action) => (\n  <Button onClick={() => action(lng)} type=\"link\">\n    {lng.toUpperCase()}\n  </Button>\n);\n\n/**\n * This is the main app layout component. We define elements like\n * header and sidebar, it will render any children passed as props inside\n * the layout content.\n *\n * In this case, we will connect this Parent component to redux to get the\n * pathname and other router functions to pass to @Breadcrumb and @Sidebar\n * since both have the same redux dependencies.\n *\n * @children        - Children prop, will render a react node inside the layout\n * @pathname        - (redux) the actual pathname from the router\n * @goTo            - (redux) function mapped to react-router-redux \"push\"\n */\nconst AppLayout = ({ children, pathname, goTo, language, setLanguage }) => {\n  useEffect(() => {\n    i18n.changeLanguage(language);\n  }, [language]);\n\n  return (\n    <Layout className=\"app-layout\">\n      <Header className=\"header\">\n        <span>My App</span>\n      </Header>\n      <Layout>\n        <Sidebar pathname={pathname} goTo={goTo} />\n        <Layout className=\"app-layout-content\">\n          <Breadcrumb pathname={pathname} goTo={goTo} />\n          <Content className=\"content\">{children}</Content>\n          <Footer>\n            <Row>\n              <Col md={20}>{process.env.REACT_APP_NAME}</Col>\n              <Col md={4}>\n                {lngButton('es', setLanguage)}\n                {'/'}\n                {lngButton('en', setLanguage)}\n              </Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n};\n\nAppLayout.propTypes = {\n  children: node.isRequired,\n  pathname: string.isRequired,\n  goTo: func.isRequired,\n  setLanguage: func.isRequired,\n  language: string.isRequired,\n};\n\nconst mapStateToProps = ({ router: { location }, layout }) => ({\n  pathname: location.pathname,\n  language: layout.language,\n});\n\nconst mapDispatchToProps = {\n  goTo: push,\n  setLanguage: changeLanguageNotifier,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppLayout);\n","import { ConfigProvider } from 'antd';\nimport esES from 'antd/es/locale/es_ES';\nimport React from 'react';\nimport RoutesContainer from './RoutesContainer';\nimport AppLayout from '../components/layout/AppLayout';\nimport './app.scss';\n\n/**\n * This is the main entry app component. Here we wll define the actual app layout\n * and locale provider\n *\n */\nconst AppContainer = () => {\n  return (\n    <ConfigProvider locale={esES}>\n      <AppLayout>\n        <RoutesContainer />\n      </AppLayout>\n    </ConfigProvider>\n  );\n};\n\nexport default AppContainer;\n"],"sourceRoot":""}