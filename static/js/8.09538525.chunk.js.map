{"version":3,"sources":["app/RouterContainer.jsx"],"names":["AppContainer","lazy","hashLinkScroll","hash","window","location","setTimeout","id","replace","element","document","getElementById","scrollIntoView","history","onUpdate","fallback"],"mappings":"oKAAA,8DAOMA,EAAeC,gBAAK,kBAAM,uDAOhC,SAASC,IAAkB,IACjBC,EAASC,OAAOC,SAAhBF,KACK,KAATA,GAIFG,YAAW,WACT,IAAMC,EAAKJ,EAAKK,QAAQ,IAAK,IACvBC,EAAUC,SAASC,eAAeJ,GACpCE,GAASA,EAAQG,mBACpB,GAIQ,4BACb,kBAAC,IAAD,CAAiBC,QAASA,KACxB,kBAAC,IAAD,CAAQC,SAAUZ,EAAgBW,QAASA,KACzC,kBAAC,WAAD,CAAUE,SAAU,kBAAC,IAAD,OAClB,kBAACf,EAAD","file":"static/js/8.09538525.chunk.js","sourcesContent":["import { ConnectedRouter } from 'connected-react-router';\nimport React, { lazy, Suspense } from 'react';\nimport { Router } from 'react-router-dom';\nimport Loader from '../components/layout/Loader';\n\nimport history from '../routing/history';\n\nconst AppContainer = lazy(() => import('./AppContainer'));\n\n/**\n * This is the main router component. Here we will declare any wrappers needed\n * for the react-router to work correctly\n *\n */\nfunction hashLinkScroll() {\n  const { hash } = window.location;\n  if (hash !== '') {\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    setTimeout(() => {\n      const id = hash.replace('#', '');\n      const element = document.getElementById(id);\n      if (element) element.scrollIntoView();\n    }, 0);\n  }\n}\n\nexport default () => (\n  <ConnectedRouter history={history}>\n    <Router onUpdate={hashLinkScroll} history={history}>\n      <Suspense fallback={<Loader />}>\n        <AppContainer />\n      </Suspense>\n    </Router>\n  </ConnectedRouter>\n);\n"],"sourceRoot":""}