{"version":3,"sources":["components/form/Field/index.jsx","hooks/useForm.js","components/form/FormGenerator/index.jsx","pages/Posts/NewPost/components/NewPostForm/index.jsx","pages/Posts/NewPost/index.jsx"],"names":["Field","name","Input","component","onChange","item","validate","label","options","rest","changeValue","value","error","touched","handleOnChange","e","val","target","useEffect","Item","htmlFor","validateStatus","help","onBlur","defaultProps","undefined","useForm","fields","useState","reduce","initialForm","initialValue","formInitializer","form","setForm","errors","setErrors","formValues","useMemo","Object","entries","fv","key","values","map","filter","err","updatedItem","FormGenerator","onSubmit","layout","handleChange","className","placeholder","col","onClick","length","title","content","NewPostForm","submitPost","span","gutter","mapDispatchToProps","createPost","createPostsNotifier","connect"],"mappings":"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","file":"static/js/8.23c2e44d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { any, func, object, string } from 'prop-types';\nimport { Form } from 'antd';\n\nconst Field = ({\n  name,\n  component: Input,\n  onChange,\n  item,\n  validate,\n  label,\n  options,\n  ...rest\n}) => {\n  const changeValue = (value, error) => {\n    onChange({ name, value, error, touched: true });\n  };\n\n  const handleOnChange = (e) => {\n    const val = e.target ? e.target.value : e;\n    const error = validate ? validate(val) : null;\n    changeValue(val, error);\n  };\n\n  const handleOnBlur = () => {\n    const error = validate ? validate(item?.value) : null;\n    changeValue(item?.value, error);\n  };\n\n  useEffect(() => {\n    if (item.value) handleOnChange(item.value);\n  }, []);\n\n  const getStatus = () => {\n    if (item?.value) {\n      return item?.error ? 'error' : 'success';\n    }\n    return null;\n  };\n\n  return (\n    <Form.Item\n      label={label}\n      htmlFor={name}\n      validateStatus={getStatus()}\n      help={item?.error}\n      {...options}\n    >\n      <Input\n        name={name}\n        value={item?.value}\n        onBlur={handleOnBlur}\n        onChange={handleOnChange}\n        {...rest}\n      />\n    </Form.Item>\n  );\n};\n\nField.propTypes = {\n  name: string.isRequired,\n  component: any.isRequired,\n  onChange: func.isRequired,\n  item: any,\n  validate: func,\n  label: string,\n  options: object,\n};\n\nField.defaultProps = {\n  validate: null,\n  item: undefined,\n  label: undefined,\n  options: {},\n};\n\nexport default Field;\n","import { useEffect, useMemo, useState } from 'react';\n\nconst formInitializer = (fields) =>\n  fields.reduce(\n    (initialForm, { name, initialValue }) => ({\n      ...initialForm,\n      [name]: {\n        value: initialValue,\n        error: undefined,\n        touched: !!initialValue,\n      },\n    }),\n    {}\n  );\n\nconst useForm = (fields) => {\n  const [form, setForm] = useState(formInitializer(fields));\n  const [errors, setErrors] = useState(false);\n\n  const formValues = useMemo(\n    () =>\n      Object.entries(form).reduce((fv, [key, { value }]) => {\n        return { ...fv, [key]: value };\n      }, {}),\n    [form]\n  );\n\n  useEffect(() => {\n    setErrors(\n      Object.values(form)\n        .map(({ error }) => error)\n        .filter((err) => !!err)\n    );\n  }, [form]);\n\n  const handleChange = (updatedItem) => {\n    setForm({\n      ...form,\n      [updatedItem.name]: updatedItem,\n    });\n  };\n\n  return [handleChange, formValues, errors, form];\n};\n\nexport default useForm;\n","import React from 'react';\nimport { any, arrayOf, func, object, shape, string } from 'prop-types';\nimport { Button, Col, Form, Modal, Row } from 'antd';\nimport Field from '../Field';\nimport useForm from '../../../hooks/useForm';\n\nconst FormGenerator = ({ fields, onSubmit, layout }) => {\n  const [handleChange, formValues, errors, form] = useForm(fields);\n\n  const handleSubmit = () => {\n    if (!errors.length) {\n      onSubmit(formValues);\n    } else {\n      Modal.error({\n        title: 'Oops!',\n        content: `Looks like there are some errors on the form, \n                  check them out and try again!`,\n      });\n    }\n  };\n\n  return (\n    <Form layout=\"vertical\" className=\"form-generator\">\n      <Row {...layout}>\n        {fields.map(\n          ({\n            component,\n            name,\n            placeholder,\n            label,\n            validate,\n            options,\n            layout: { col } = {},\n          }) => (\n            <Col {...col} key={name}>\n              <Field\n                component={component}\n                name={name}\n                placeholder={placeholder}\n                label={label || placeholder}\n                item={form[name]}\n                validate={validate}\n                options={options}\n                onChange={handleChange}\n              />\n            </Col>\n          )\n        )}\n      </Row>\n      <Button onClick={handleSubmit}>Submit</Button>\n    </Form>\n  );\n};\n\nFormGenerator.propTypes = {\n  fields: arrayOf(\n    shape({\n      name: string,\n      component: any,\n      placeholder: string,\n      label: string,\n      validate: func,\n    })\n  ).isRequired,\n  onSubmit: func.isRequired,\n  layout: object,\n};\n\nFormGenerator.defaultProps = {\n  layout: {},\n};\n\nexport default FormGenerator;\n","import React from 'react';\nimport { Input } from 'antd';\nimport { func } from 'prop-types';\nimport FormGenerator from '../../../../../components/form/FormGenerator';\n\nconst NewPostForm = ({ submitPost }) => {\n  const fields = [\n    {\n      name: 'title',\n      placeholder: 'Title',\n      component: Input,\n      layout: { col: { span: 12 } },\n    },\n    {\n      name: 'body',\n      placeholder: 'Body',\n      layout: { col: { span: 12 } },\n      component: Input,\n    },\n  ];\n\n  const layout = { gutter: 16 };\n\n  return (\n    <div className=\"new-post-form\">\n      <FormGenerator onSubmit={submitPost} fields={fields} layout={layout} />\n    </div>\n  );\n};\n\nNewPostForm.propTypes = {\n  submitPost: func.isRequired,\n};\n\nNewPostForm.defaultProps = {};\n\nexport default NewPostForm;\n","import { func } from 'prop-types';\nimport React from 'react';\nimport { Card } from 'antd';\nimport { connect } from 'react-redux';\nimport { createPostsNotifier } from '../../../redux/modules/posts/actions/createPost';\nimport './newPost.scss';\nimport NewPostForm from './components/NewPostForm';\n\nconst NewPost = ({ createPost }) => {\n  return (\n    <Card className=\"sample-form-container\" title=\"Post form\">\n      <NewPostForm submitPost={createPost} />\n    </Card>\n  );\n};\n\nNewPost.propTypes = {\n  createPost: func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  createPost: createPostsNotifier,\n};\n\nexport default connect(null, mapDispatchToProps)(NewPost);\n"],"sourceRoot":""}