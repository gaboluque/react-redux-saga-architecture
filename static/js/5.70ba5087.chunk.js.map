{"version":3,"sources":["services/api/dummyAPI/fetchPostsService.js","redux/modules/posts/actions/fetchPosts.js","redux/helpers/notifyAction.js","redux/modules/auth/actions/logIn.js","redux/helpers/request.js","redux/helpers/requestSuccess.js","redux/helpers/requestFailure.js","services/api/dummyAPI/index.js","redux/modules/layout/actions/changeLanguage.js","utils/auth/roles.js","routing/history.js","services/api/helpers/formatParams.js","services/api/dummyAPI/createPostService.js","redux/modules/posts/actions/createPost.js","redux/modules/posts/reducer.js","redux/modules/layout/reducer.js","redux/modules/layout/actions/loaderActions.js","redux/modules/auth/reducer.js","redux/modules/posts/watcher.js","redux/modules/auth/watcher.js","redux/modules/layout/watcher.js","redux/sagas.js","redux/reducers.js","redux/configureStore.js","app/ReduxContainer.jsx","routing/paths.js","redux/helpers/createAction.js"],"names":["testApi","get","then","data","fetchPostsAction","FETCH_POSTS_ACTION","FETCH_POSTS_SUCCESS","fetchPostsNotifier","notifyAction","type","loader","call","request","service","fetchPosts","cancelId","callback","undefined","notifier","logInAction","LOG_IN_ACTION","LOG_IN_SUCCESS","LOG_IN_FAILURE","logInNotifier","formValues","delay","username","password","requestSuccess","user","role","USER_ROLE","token","error","description","requestFailure","cancelableRequest","params","redirect","onSuccess","onFailure","normalizer","response","status","includes","normalizedData","rest","fork","myRequest","take","cancel","put","push","createAction","dummyAPI","axios","create","baseURL","defaults","paramsSerializer","qs","stringify","encode","interceptors","use","CHANGE_LANGUAGE_ACTION","changeLanguageNotifier","language","createBrowserHistory","queryKey","formatParams","method","post","parsedElement","fakeDataParser","createPostSuccess","createPostsAction","CREATE_POST_ACTION","formatter","userId","createPostsNotifier","notification","success","createPosts","POSTS_PATH","INITIAL_STATE","posts","state","payload","navigator","loading","verified","takeLatest","loaderListener","actionName","action","rootSaga","all","postsWatcher","authWatcher","layoutWatcher","history","persistConfig","key","process","storage","whitelist","pReducer","persistReducer","combineReducers","auth","authReducer","layout","layoutReducer","postsReducer","router","connectRouter","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","routerMiddleware","persistor","persistStore","run","sagas","configureStore","RouterContainer","lazy","Loader","fallback","HOME_PATH","NEW_POST_PATH"],"mappings":"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","file":"static/js/5.70ba5087.chunk.js","sourcesContent":["import testApi from './index';\n\nexport const FETCH_POSTS_ENDPOINT = '/posts?userId=10';\n\nexport default () => {\n  return testApi.get(FETCH_POSTS_ENDPOINT).then((data) => {\n    return data;\n  });\n};\n","import { call } from 'redux-saga/effects';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport fetchPosts from '../../../../services/api/dummyAPI/fetchPostsService';\n\n// CONSTANTS\n\nexport const FETCH_POSTS_ACTION = 'FETCH_POSTS_ACTION';\nexport const FETCH_POSTS_SUCCESS = `${FETCH_POSTS_ACTION}_SUCCESS`;\nexport const FETCH_POSTS_FAILURE = `${FETCH_POSTS_ACTION}_FAILURE`;\n\nconst fetchPostsNotifier = () => {\n  return notifyAction({\n    type: FETCH_POSTS_ACTION,\n    loader: true,\n  });\n};\n\n/* LOG IN ACTION */\nfunction* fetchPostsAction() {\n  yield call(request, {\n    type: FETCH_POSTS_ACTION,\n    service: fetchPosts,\n    cancelId: 'fetch_posts',\n  });\n}\n\nexport { fetchPostsAction, fetchPostsNotifier };\n","/**\n * The notify action creates an overloaded redux action.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @data          (optional) An object containing the payload to the saga.\n * @loader        (optional) A boolean to notify that we want to show a loader in the screen.\n * @callback      (optional) A function that will be called after the saga has finished with any data processed.\n */\nconst notifyAction = ({\n  type,\n  data = {},\n  loader = false,\n  callback = undefined,\n}) => ({\n  type,\n  callback,\n  data,\n  loader,\n  notifier: true,\n});\n\nexport default notifyAction;\n","import { call, delay } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport notifyAction from '../../../helpers/notifyAction';\nimport requestSuccess from '../../../helpers/requestSuccess';\nimport { USER_ROLE } from '../../../../utils/auth/roles';\nimport requestFailure from '../../../helpers/requestFailure';\n\n// CONSTANTS\nexport const LOG_IN_ACTION = 'LOG_IN_ACTION';\nexport const LOG_IN_SUCCESS = `${LOG_IN_ACTION}_SUCCESS`;\nexport const LOG_IN_FAILURE = `${LOG_IN_ACTION}FAILURE`;\n\n/* LOG IN NOTIFIER */\n\nconst logInNotifier = (formValues) => {\n  return notifyAction({\n    type: LOG_IN_ACTION,\n    data: formValues,\n    loader: true,\n  });\n};\n\n/* LOG IN ACTION */\n// Mock login\nfunction* logInAction({ data }) {\n  yield delay(3000); // Simulate server delay\n\n  if (data.username === 'test' && data.password === 'test') {\n    yield call(requestSuccess, {\n      type: LOG_IN_ACTION,\n      data: { user: data, role: USER_ROLE, token: 'testToken' },\n    });\n  } else {\n    notification.error({ description: 'Invalid username or password' });\n    yield call(requestFailure, {\n      type: LOG_IN_ACTION,\n      data,\n    });\n  }\n}\n\nexport { logInNotifier, logInAction };\n","import { call, fork, take, cancel } from 'redux-saga/effects';\nimport requestSuccess from './requestSuccess';\nimport requestFailure from './requestFailure';\n\nfunction* request({\n  type,\n  service,\n  params = {},\n  redirect = null,\n  callback = null,\n  onSuccess = null,\n  onFailure = null,\n  normalizer = null,\n}) {\n  const response = yield call(service, params);\n\n  if (!response) {\n    // TODO: Handle server communication error\n  } else {\n    const { status, data } = response;\n    if ([200, 201].includes(status)) {\n      // If request call is successful\n      const normalizedData = normalizer ? normalizer(data) : data;\n      yield call(requestSuccess, {\n        type,\n        data: normalizedData,\n        redirect,\n        callback,\n        onSuccess,\n      });\n    } else {\n      // If request call fails\n      yield call(requestFailure, { type, data, status, onFailure });\n    }\n  }\n  // TODO: Handle any loader ends\n}\n\n/**\n * The request function can be used with redux saga to make async API calls.\n *\n * By passing strategical params, the redux action will contain\n * valuable information to oost the redux/saga process.\n *\n * @type          Action type (Eg. FETCH_DATA).\n * @method        A strig with the type of method used to call the API (GET, POST, PUT, DELETE)\n * @endpoint      Tha actual enpoint called with the API\n * @api           An Axios instace containing the specific API information\n * @params        (optional) An object containing the data that will be sent to the endpoint\n * @path          (optional) A react-router to redirect after the request is succesfull\n * @callback      (optional) A callback function to be called after the request is succesfull with the data processed\n * @onSuccess     (optional) A custom generator function passed to redux saga if the request is successful\n * @onFailure     (optional) A custom generator function passed to redux saga if the request fails\n * @normalizer    (optional) A custom reducer to process API response data before reaching the reducer\n * @cancelId      (optional) A unique id that can be used with cancelable requests. If a cancelId is passed, the request will be canceled next time an identical id is recieved.\n */\nfunction* cancelableRequest({ cancelId, ...rest }) {\n  const myRequest = yield fork(request, rest);\n  if (cancelId) {\n    yield take(`${rest.type}_${cancelId}`);\n    yield cancel(myRequest);\n  }\n}\n\nexport default cancelableRequest;\n","import { push } from 'connected-react-router';\nimport { call, put } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestSuccess({\n  type,\n  data,\n  redirect,\n  callback,\n  onSuccess,\n}) {\n  if (redirect) yield put(push(redirect));\n  yield put(createAction(`${type}_SUCCESS`, data));\n  if (callback) yield call(callback, data);\n  if (onSuccess) yield call(onSuccess, data);\n}\n","import { put, call } from 'redux-saga/effects';\nimport createAction from './createAction';\n\nexport default function* requestFailure({ type, data, status, onFailure }) {\n  switch (status) {\n    case 403:\n      // TODO: Define what to do on 403\n      break;\n    case 401:\n      // TODO: Define what to do on 401\n      break;\n    case 408:\n      // TODO: Define what to do on 408\n      break;\n    default:\n      break;\n  }\n  yield put(createAction(`${type}_FAILURE`, data));\n  if (onFailure) yield call(onFailure);\n}\n","import axios from 'axios';\nimport qs from 'qs';\n\nconst dummyAPI = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n\ndummyAPI.defaults.paramsSerializer = (params) =>\n  qs.stringify(params, { encode: false });\n\ndummyAPI.interceptors.response.use(\n  (response) => response,\n  (error) => error.response\n);\n\nexport default dummyAPI;\n","import createAction from '../../../helpers/createAction';\n\n// CONSTANTS\nexport const CHANGE_LANGUAGE_ACTION = 'CHANGE_LANGUAGE_ACTION';\n\n/* CHANGE LANGUAGE NOTIFIER */\n\nconst changeLanguageNotifier = (language) =>\n  createAction(CHANGE_LANGUAGE_ACTION, language);\n\nexport { changeLanguageNotifier };\n","const USER_ROLE = 'user';\n\nexport { USER_ROLE };\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory({\n  queryKey: false,\n});\n","const formatParams = (method, params) =>\n  method === 'get' ? { params } : params;\n\nexport default formatParams;\n","import testApi from './index';\nimport formatParams from '../helpers/formatParams';\n\nconst fakeDataParser = (data) => ({ ...data, parsedElement: 'Hi' });\n\nexport default (params) =>\n  testApi.post('/posts', formatParams(params)).then((data) => {\n    return fakeDataParser(data);\n  });\n","import { call, put } from 'redux-saga/effects';\nimport { notification } from 'antd';\nimport notifyAction from '../../../helpers/notifyAction';\nimport request from '../../../helpers/request';\nimport createPosts from '../../../../services/api/dummyAPI/createPostService';\nimport { POSTS_PATH } from '../../../../routing/paths';\nimport { fetchPostsNotifier } from './fetchPosts';\n\n// CONSTANTS\n\nexport const CREATE_POST_ACTION = 'CREATE_POST_ACTION';\nexport const CREATE_POST_SUCCESS = `${CREATE_POST_ACTION}_SUCCESS`;\nexport const CREATE_POST_FAILURE = `${CREATE_POST_ACTION}_FAILURE`;\n\n/* LOG IN NOTIFIER */\nconst formatter = (formValues) => {\n  return {\n    ...formValues,\n    userId: 10,\n  };\n};\n\nconst createPostsNotifier = (formValues) => {\n  return notifyAction({\n    type: CREATE_POST_ACTION,\n    loader: true,\n    data: formatter(formValues),\n  });\n};\n\n/* LOG IN ACTION */\n\nfunction* createPostSuccess() {\n  yield put(fetchPostsNotifier());\n  notification.success({ description: 'Post created correctly!' });\n}\n\nfunction* createPostsAction({ data }) {\n  yield call(request, {\n    type: CREATE_POST_ACTION,\n    service: createPosts,\n    params: data,\n    redirect: POSTS_PATH,\n    onSuccess: createPostSuccess,\n  });\n}\n\nexport { createPostsAction, createPostsNotifier };\n","import { FETCH_POSTS_SUCCESS } from './actions/fetchPosts';\n\n// TODO: Store design\nexport const INITIAL_STATE = {\n  posts: [],\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case FETCH_POSTS_SUCCESS:\n      return { ...state, posts: payload };\n    default:\n      return state;\n  }\n};\n","import { CHANGE_LANGUAGE_ACTION } from './actions/changeLanguage';\nimport {\n  HIDE_LOADER_ACTION,\n  SHOW_LOADER_ACTION,\n} from './actions/loaderActions';\n\nexport const INITIAL_STATE = {\n  language: navigator.language || 'en',\n  loading: false,\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case CHANGE_LANGUAGE_ACTION:\n      return { ...state, language: payload };\n    case SHOW_LOADER_ACTION:\n      return { ...state, loading: true };\n    case HIDE_LOADER_ACTION:\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n","import createAction from '../../../helpers/createAction';\n\n// CONSTANTS\nexport const SHOW_LOADER_ACTION = 'SHOW_LOADER_ACTION';\nexport const HIDE_LOADER_ACTION = 'HIDE_LOADER_ACTION';\n\n/* CHANGE LANGUAGE NOTIFIER */\n\nconst showLoaderAction = () => createAction(SHOW_LOADER_ACTION);\nconst hideLoaderAction = () => createAction(HIDE_LOADER_ACTION);\n\nexport { showLoaderAction, hideLoaderAction };\n","import { LOG_IN_FAILURE, LOG_IN_SUCCESS } from './actions/logIn';\n\nexport const INITIAL_STATE = {\n  token: null,\n  role: 'public',\n  verified: false,\n  user: {},\n};\n\nexport default (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n    case LOG_IN_SUCCESS:\n      return { ...state, ...{ ...payload, verified: true } };\n    case LOG_IN_FAILURE:\n      return { ...INITIAL_STATE, verified: true };\n    default:\n      return state;\n  }\n};\n","import { takeLatest } from 'redux-saga/effects';\nimport { fetchPostsAction, FETCH_POSTS_ACTION } from './actions/fetchPosts';\nimport { CREATE_POST_ACTION, createPostsAction } from './actions/createPost';\n\nexport default [\n  takeLatest(FETCH_POSTS_ACTION, fetchPostsAction),\n  takeLatest(CREATE_POST_ACTION, createPostsAction),\n];\n","import { takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_ACTION, logInAction } from './actions/logIn';\n\nexport default [takeLatest(LOG_IN_ACTION, logInAction)];\n","import { put, take, takeLatest } from 'redux-saga/effects';\nimport { hideLoaderAction, showLoaderAction } from './actions/loaderActions';\n\nconst isLoaderNotifier = ({ notifier, loader }) => notifier && loader;\n\nfunction* loaderListener({ type: actionName }) {\n  yield put(showLoaderAction());\n\n  // Wait until an action is dispatched with the same type\n  yield take(({ type, action }) => action && type.includes(actionName));\n  yield put(hideLoaderAction());\n}\n\nexport default [takeLatest(isLoaderNotifier, loaderListener)];\n","import { all } from 'redux-saga/effects';\nimport postsWatcher from './modules/posts/watcher';\nimport authWatcher from './modules/auth/watcher';\nimport layoutWatcher from './modules/layout/watcher';\n\nexport default function* rootSaga() {\n  yield all([...postsWatcher, ...authWatcher, ...layoutWatcher]);\n}\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport postsReducer from './modules/posts/reducer';\nimport layoutReducer from './modules/layout/reducer';\nimport authReducer from './modules/auth/reducer';\n\nexport default (history) =>\n  combineReducers({\n    auth: authReducer,\n    layout: layoutReducer,\n    posts: postsReducer,\n    router: connectRouter(history),\n  });\n","import { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nimport history from '../routing/history';\n\nconst persistConfig = {\n  key: `${process.env.REACT_APP_NAME}_persist_store`,\n  storage,\n  whitelist: ['layout'],\n};\nconst pReducer = persistReducer(persistConfig, reducers(history));\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const composeEnhancers =\n    (process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\n  const store = createStore(\n    pReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\n  );\n\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(sagas);\n  return { persistor, store };\n};\n","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Loader from '../components/layout/Loader';\nimport configureStore from '../redux/configureStore';\n\nconst { store, persistor } = configureStore();\nconst RouterContainer = lazy(() => import('./RouterContainer'));\n\n/**\n * This is the main redux component, here we can add any providers and\n * necessary wrappers.\n *\n * Right now we've added the actual redux provider and a\n * PersistGate to persist our store on page reload\n *\n */\nexport default () => (\n  <Provider store={store}>\n    <PersistGate loading={<Loader />} persistor={persistor}>\n      <Suspense fallback={<Loader />}>\n        <RouterContainer />\n      </Suspense>\n    </PersistGate>\n  </Provider>\n);\n","const HOME_PATH = '/';\n\nconst POSTS_PATH = '/posts';\nconst NEW_POST_PATH = `${POSTS_PATH}/new`;\n\n// AUTH\nconst LOG_IN_PATH = '/log-in';\n\nexport { HOME_PATH, POSTS_PATH, NEW_POST_PATH, LOG_IN_PATH };\n","export default (type, payload = {}) => ({ type, payload, action: true });\n"],"sourceRoot":""}